/**********************************************************************/
/*This code is not clean and OFFCOURSE will be possible do it better! */ 
/*this is only a group of functions to be used as independent code,  */ 
/*and by this way will be possible to any person can do the changes   */ 
/*of code and see what happen.                                         */
/*The code don't depend of any external library or extenal functions  */
/*complicated.                                                         */
/*I'm let the values to sent as binnary, this allow swap bit by bit */
/* to is possible test segment by segment without convert to HEX    */
/**********************************************************************/
/* This code show how is possible work with the driver LC75824 Sanyo */
/* This IC same times is marked as only the "366-34" from SANYO */
/* Also pinout is equivalent to the PT6524, check the datasheet */
/*Begining of Auto generated code by Atmel studio */

#define VFD_in 7  // This is the pin number 7 on Arduino UNO
#define VFD_clk 8 // This is the pin number 8 on Arduino UNO
#define VFD_ce 9 // This is the pin number 9 on Arduino UNO

//ATT: On the Uno and other ATMEGA based boards, unsigned ints (unsigned integers) are the same as ints in that they store a 2 byte value.
//Long variables are extended size variables for number storage, and store 32 bits (4 bytes), from -2,147,483,648 to 2,147,483,647.

//*************************************************//
void setup() {
  pinMode(VFD_clk, OUTPUT);
  pinMode(VFD_in, OUTPUT);
  pinMode(VFD_ce, OUTPUT);
 
  pinMode(13, OUTPUT);
  Serial.begin(9600); // only to debug
}
void send_char(unsigned char a)
{
 //
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
  data=a;
  // the validation of data happen when clk go from LOW to HIGH.
  // This lines is because the clk have one advance in data, see datasheet of sn74HC595
  // case don't have this signal instead of "." will se "g"
  digitalWrite(VFD_ce, LOW); // When strobe is low, all output is enable. If high, all output will be set to low.
  delayMicroseconds(5);
  digitalWrite(VFD_clk,LOW);// need invert the signal to allow 8 bits is is low only send 7 bits
  delayMicroseconds(5);
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
  digitalWrite(VFD_clk,LOW);// need invert the signal to allow 8 bits is is low only send 7 bits
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// need invert the signal to allow 8 bits is is low only send 7 bits
    delayMicroseconds(5);
    //
    digitalWrite(VFD_ce, HIGH); // When strobe is low, all output is enable. If high, all output will be set to low.
  delayMicroseconds(5);
  }
}
/*********************************************************************/
// I h've created 3 functions to send bit's, one with strobe, other without strobe and one with first byte with strobe followed by remaing bits.
void send_char_without(unsigned char a)
{
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
  data=a;
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
  digitalWrite(VFD_clk, LOW);
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// need invert the signal to allow 8 bits is is low only send 7 bits
    delayMicroseconds(5);
  }
}
/*********************************************************************/
void send_char_8bit_stb(unsigned char a)
{
 unsigned char transmit = 15; //define our transmit pin
 unsigned char data = 170; //value to transmit, binary 10101010
 unsigned char mask = 1; //our bitmask
 int i = -1;
  data=a;
  // This lines is because the clk have one advance in data, see datasheet of sn74HC595
  // case don't have this signal instead of "." will se "g"
  for (mask = 0b00000001; mask>0; mask <<= 1) { //iterate through bit mask
   i++;
   digitalWrite(VFD_clk, LOW);
  delayMicroseconds(5);
    if (data & mask){ // if bitwise AND resolves to true
      digitalWrite(VFD_in, HIGH);
      //Serial.print(1);
    }
    else{ //if bitwise and resolves to false
      digitalWrite(VFD_in, LOW);
      //Serial.print(0);
    }
    digitalWrite(VFD_clk,HIGH);// 
    delayMicroseconds(1);
    if (i==7){
    Serial.println(i);
    digitalWrite(VFD_ce, HIGH);
    delayMicroseconds(1);
    }  
  }
}
/*******************************************************************/
void sendControl_LC75808(){
//send total of 8 + 24 bits.
//
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); // firts 8 bits is CCB(is 0x4B) address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
//Structure is as follow: PC1,PC2,PC3,PC4,CT0,CT1,CT2,CT3,CTC,SC,BU,DT1,DT2,1,0,1. The last 3 bits is mark as control
//Importante: BU normal mode, SC segment on/off, PC1-PC4 general porpuse,CT0-CT3 & CTC contrast display
send_char_without(0B00000000); send_char_without(0B00000000);  send_char_without(0B00100000); // 1:24 Marked as cmd status dsp 
//               (0B0000xxxx) x adjust contrast, (0Bxxxx0000) General Purpose
//
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/*******************************************************************/
void allON_LC75808(){
unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
for(int i=0; i<4;i++){   // Dx until 600 bits
      group=i;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01000010), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    
    send_char_without(0B11111111);  send_char_without(0B11111111); //   1:8       
    send_char_without(0B11111111);  send_char_without(0B11111111); //  17:24    
    send_char_without(0B11111111);  send_char_without(0B11111111); //  33:40     
    send_char_without(0B11111111);  send_char_without(0B11111111); //  49:56    
    send_char_without(0B11111111);  send_char_without(0B11111111); //  65:72    
    send_char_without(0B11111111);  send_char_without(0B11111111); //  81:88    
    send_char_without(0B11111111);  send_char_without(0B11111111); //  96:103   
    send_char_without(0B11111111);   // 112:119  
        switch (group){ //-120:127//Last 3 bits is "DD" data direction, and is used
          case 0: send_char_without(0B00000000); break;
          case 1: send_char_without(0B10000000); break;
          case 2: send_char_without(0B01000000); break;
          case 3: send_char_without(0B11000000); break;
        }
    
// to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
}
/**************************************************************************/
void allOFF_LC75808(){
unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
for(int i=0; i<4;i++){ // Dx until 600 bits
      group=i;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01000010), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    
    send_char_without(0B00000000);  send_char_without(0B00000000); //   1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  17:24    -25:32// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  81:88    -89:96// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  96:103  -104:111//  
    send_char_without(0B00000000);   // 112:119  
        switch (group){ //120:127// Last 3 bits is "DD" data direction, and is used
          case 0: send_char_without(0B00000000); break;
          case 1: send_char_without(0B10000000); break;
          case 2: send_char_without(0B01000000); break;
          case 3: send_char_without(0B11000000); break;
        }
   
// to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
 }
}
/*******************************************************************/
/*******************************************************************/
void sendControl_LC75878(){
//send total of 8 + 16 bits.
//
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); // firts 8 bits is CCB(is 0x4B) address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
//Structure is as follow: PC1,PC2,PC3,PC4,CT0,CT1,CT2,CT3,CTC,SC,BU,DT1,DT2,1,0,1. The last 3 bits is mark as control
//Importante: BU normal mode, SC segment on/off, PC1-PC4 general porpuse,CT0-CT3 & CTC contrast display
send_char_without(0B00001000);  send_char_without(0B10100000); //  1:16// Marked as cmd status dsp 
//               (0B0000xxxx) x adjust contrast, (0Bxxxx0000) General Purpose
//
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/*******************************************************************/
void allON_LC75878(){
  unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
for(int i=0; i<5;i++){   // Dx until 600 bits
      group=i;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    
    send_char_without(0B11111111);  send_char_without(0B11111111); //   1:8      -9:16// 
    send_char_without(0B11111111);  send_char_without(0B11111111); //  17:24    -25:32// 
    send_char_without(0B11111111);  send_char_without(0B11111111); //  33:40    -41:48// 
    send_char_without(0B11111111);  send_char_without(0B11111111); //  49:56    -57:64// 
    send_char_without(0B11111111);  send_char_without(0B11111111); //  65:72    -73:80// 
    send_char_without(0B11111111);  send_char_without(0B11111111); //  81:88    -89:96//  
    send_char_without(0B11111111);  send_char_without(0B11111111); //  96:103  -104:111//  
    send_char_without(0B11111111);   // 112:119  
        switch (group){ //-120:127//Last 3 bits is "DD" data direction, and is used
          case 0: send_char_without(0B00000000); break;
          case 1: send_char_without(0B10000000); break;
          case 2: send_char_without(0B01000000); break;
          case 3: send_char_without(0B11000000); break;
          case 4: send_char_without(0B00100000); break;
        }
    
// to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
}
/**************************************************************************/
void allOFF_LC75878(){
unsigned char group=0;
//send total of 64 bits, the 4 last bits belongs to set of DR, SC, BU, etc;
//The p0, p1, p2 & p3 at 0, means all pins from s1 to s12 will belongs to segments, other's settings tell will px is a port general purpose!
for(int i=0; i<5;i++){ // Dx until 600 bits
      group=i;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    
    send_char_without(0B00000000);  send_char_without(0B00000000); //   1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  17:24    -25:32//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); //  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  81:88    -89:96//  
    send_char_without(0B00000000);  send_char_without(0B00000000); //  96:103  -104:111//  
    send_char_without(0B00000000);   // 112:119  
        switch (group){ //120:127// Last 3 bits is "DD" data direction, and is used
          case 0: send_char_without(0B00000000); break;
          case 1: send_char_without(0B10000000); break;
          case 2: send_char_without(0B01000000); break;
          case 3: send_char_without(0B11000000); break;
          case 4: send_char_without(0B00100000); break;
        }
   
// to mark the 5 groups of 120 bits, 000, 001, 010, 011, 100.
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
 }
}
/****************************************************************************/
/****************************************************************************/
void LC75878_00_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  -104:111//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_10_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  -104:111//  
    send_char_without(0B00000000);  send_char_without(0B10000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_01_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  -104:111//  
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_11_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B10000000); // 0-1   1:8     
    send_char_without(0B00000000);  send_char_without(0B10000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B10000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B10000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  
    send_char_without(0B00000000);  send_char_without(0B11000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_001_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //Blk4
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B11111111);  send_char_without(0B11111111); // A-B  81:88     
    send_char_without(0B11111111);  send_char_without(0B11111111); // C-D  96:103   
    send_char_without(0B11111111);  send_char_without(0B00100000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/**************************************************************************/
/****************************************************************************/
void LC75808_00_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88   
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103 
    send_char_without(0B00000000);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_10_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  -104:111//  
    send_char_without(0B00000000);  send_char_without(0B10000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_01_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      -9:16// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103  -104:111// 
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_11_120(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      -9:16//
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    -25:32//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    -41:48//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    -57:64// 
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    -73:80//  
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    -89:96//  
    send_char_without(0B00000000);  send_char_without(0B11111111); // C-D  96:103  -104:111//  
    send_char_without(0B11111111);  send_char_without(0B11000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
/****************************************************************************/
/********************** Write message 1 on matrix 5*7 ***********************/
/*                             HELLO FOLKS                                  */
/****************************************************************************/
void LC75878_00_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8       
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B11111110); // 4-5  33:40    H 
    send_char_without(0B00010000);  send_char_without(0B00010000); // 6-7  49:56    
    send_char_without(0B00010000);  send_char_without(0B11111110); // 8-9  65:72    
    send_char_without(0B11111110);  send_char_without(0B10010010); // A-B  81:88    E 
    send_char_without(0B10010010);  send_char_without(0B10010010); // C-D  96:103  
    send_char_without(0B10000010);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_10_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B11111110);  send_char_without(0B10000000); // 0-1   1:8     L 
    send_char_without(0B10000000);  send_char_without(0B10000000); // 2-3  17:24    
    send_char_without(0B10000000);  send_char_without(0B11111110); // 4-5  33:40    L
    send_char_without(0B10000000);  send_char_without(0B10000000); // 6-7  49:56    
    send_char_without(0B10000000);  send_char_without(0B10000000); // 8-9  65:72    
    send_char_without(0B11111110);  send_char_without(0B10000010); // A-B  81:88    O   
    send_char_without(0B10000010);  send_char_without(0B10000010); // C-D  96:103   
    send_char_without(0B11111110);  send_char_without(0B10000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_01_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8       
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_11_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B10000000); // 0-1   1:8     
    send_char_without(0B00000000);  send_char_without(0B10000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B10000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B10000000); // 6-7  49:56   
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B11000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_001_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //Blk4
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B11111111);  send_char_without(0B11111111); // A-B  81:88     
    send_char_without(0B11111111);  send_char_without(0B11111111); // C-D  96:103   
    send_char_without(0B11111111);  send_char_without(0B00100000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/****************************************************************************/
void LC75808_00_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8  "Space"... empty    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B11111110); // 4-5  33:40    F 
    send_char_without(0B00010010);  send_char_without(0B00010010); // 6-7  49:56    
    send_char_without(0B00010010);  send_char_without(0B00010010); // 8-9  65:72     
    send_char_without(0B11111110);  send_char_without(0B10000010); // A-B  81:88   O    
    send_char_without(0B10000010);  send_char_without(0B10000010); // C-D  96:103   
    send_char_without(0B11111110);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_10_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B11111110);  send_char_without(0B10000000); // 0-1    1:8      L
    send_char_without(0B10000000);  send_char_without(0B10000000); // 2-3  17:24   
    send_char_without(0B10000000);  send_char_without(0B11111110); // 4-5  33:40      K
    send_char_without(0B00010000);  send_char_without(0B00101000); // 6-7  49:56    
    send_char_without(0B01000100);  send_char_without(0B10000010); // 8-9  65:72     
    send_char_without(0B10011110);  send_char_without(0B10010010); // A-B  81:88      S
    send_char_without(0B10010010);  send_char_without(0B10010010); // C-D  96:103   
    send_char_without(0B11110010);  send_char_without(0B10000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_01_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8     empty
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_11_msg1(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B11111111); // C-D  96:103   
    send_char_without(0B11111111);  send_char_without(0B11000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
/****************************************************************************/
/********************** Write message 2 on matrix 5*7 ***********************/
/*                              I'M WORKING                                 */
/****************************************************************************/
void LC75878_00_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B11111110); // 4-5  33:40  I'     
    send_char_without(0B00000000);  send_char_without(0B00000100); // 6-7  49:56    
    send_char_without(0B00000010);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B11111110);  send_char_without(0B00000100); // A-B  81:88   M  
    send_char_without(0B00001000);  send_char_without(0B00000100); // C-D  96:103  
    send_char_without(0B11111110);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1); 
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_10_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8    "Space" empty  
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B11111110); // 4-5  33:40     W
    send_char_without(0B01000000);  send_char_without(0B00100000); // 6-7  49:56    
    send_char_without(0B01000000);  send_char_without(0B11111110); // 8-9  65:72    
    send_char_without(0B11111110);  send_char_without(0B10000010); // A-B  81:88    O 
    send_char_without(0B10000010);  send_char_without(0B10000010); // C-D  96:103   
    send_char_without(0B11111110);  send_char_without(0B10000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_01_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B10000000); // 0-1   1:8      
    send_char_without(0B00000000);  send_char_without(0B10000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B10000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_11_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B10000000); // 0-1   1:8      
    send_char_without(0B00000000);  send_char_without(0B10000000); // 2-3  17:24     
    send_char_without(0B00000000);  send_char_without(0B10000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B10000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B11000000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75878_001_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //Blk4
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1   1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B11111111);  send_char_without(0B11111111); // A-B  81:88    
    send_char_without(0B11111111);  send_char_without(0B11111111); // C-D  96:103   
    send_char_without(0B11111111);  send_char_without(0B00100000); // E-F 112:119  
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/***************************************************************************/
/****************************************************************************/
void LC75808_00_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    send_char_without(0B11111110);  send_char_without(0B00010010); // 0-1    1:8     R
    send_char_without(0B00110010);  send_char_without(0B01010010); // 2-3  17:24    
    send_char_without(0B10011110);  send_char_without(0B11111110); // 4-5  33:40     K
    send_char_without(0B00010000);  send_char_without(0B00101000); // 6-7  49:56     
    send_char_without(0B01000100);  send_char_without(0B10000010); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88     I
    send_char_without(0B11111110);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_10_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk1
    send_char_without(0B11111110);  send_char_without(0B00000100); // 0-1    1:8     N
    send_char_without(0B00001000);  send_char_without(0B00010000); // 2-3  17:24    
    send_char_without(0B11111110);  send_char_without(0B11111110); // 4-5  33:40     G  
    send_char_without(0B10000010);  send_char_without(0B10010010); // 6-7  49:56    
    send_char_without(0B10010010);  send_char_without(0B11110010); // 8-9  65:72    
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B10000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_01_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk2
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72    
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B01000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
void LC75808_11_msg2(void){
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk3
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B11111111); // C-D  96:103   
    send_char_without(0B11111111);  send_char_without(0B11000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
/**************************************************************************/
/************************** Drwaing Left Block ****************************/
void LC75878_drawLeft(unsigned char count){
 //
 unsigned char c =0x01;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    c=0x01;
    c=(c << count) ;
    send_char_without(c);  send_char_without(c); // 0-1    1:8      
    send_char_without(c);  send_char_without(c); // 2-3  17:24    
    send_char_without(c);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B00000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
//
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01001011); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk4
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(c);  send_char_without(c); // 6-7  49:56    
    send_char_without(c);  send_char_without(c); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B00100000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
//
/********************************************************************************/
/******************************* Drwaing Right Block ****************************/
void LC75808_drawRight(unsigned char count){
 //
 unsigned char c =0x01;
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk0
    c=0x01;
    c=(c << count) ;
    send_char_without(0B00000000);  send_char_without(0B00000000); // 0-1    1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(c); // 6-7  49:56    
    send_char_without(c);  send_char_without(c); // 8-9  65:72     
    send_char_without(c);  send_char_without(c); // A-B  81:88    
    send_char_without(c);  send_char_without(c); // C-D  96:103   
    send_char_without(c);  send_char_without(0B01000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
//
digitalWrite(VFD_ce, LOW); //
delayMicroseconds(1);
send_char_8bit_stb(0B01000010); //(0x41) firts 8 bits is address, every fixed as (0B01001011), see if clk finish LOW or HIGH Very important!
delayMicroseconds(1);
// On the 75878 the message have first 16*8 bits more 8 times to performe 128 bits(last byte is control: 0BXXX00000)
    //blk4
    send_char_without(c);  send_char_without(0B00000000); // 0-1    1:8      
    send_char_without(0B00000000);  send_char_without(0B00000000); // 2-3  17:24    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 4-5  33:40     
    send_char_without(0B00000000);  send_char_without(0B00000000); // 6-7  49:56    
    send_char_without(0B00000000);  send_char_without(0B00000000); // 8-9  65:72     
    send_char_without(0B00000000);  send_char_without(0B00000000); // A-B  81:88    
    send_char_without(0B00000000);  send_char_without(0B00000000); // C-D  96:103   
    send_char_without(0B00000000);  send_char_without(0B11000000); // E-F 112:119
delayMicroseconds(1);
digitalWrite(VFD_ce, LOW); // 
delayMicroseconds(1);
}
/**************************************************************************/
void loop() {
 //
 allOFF_LC75808(); // All off
 allOFF_LC75878(); // All off
 sendControl_LC75808();
 sendControl_LC75878();

 allON_LC75808(); // All on
 sendControl_LC75808();
 delay(2000);
 allOFF_LC75808(); // All off
 sendControl_LC75808();
 delay(2000);
 
 allON_LC75878(); // All on
 sendControl_LC75878();
 delay(2000);
 allOFF_LC75878(); // All off
 sendControl_LC75878();
 delay(2000);
 
 
 allON_LC75808(); // All on
 allON_LC75878(); // All on
 sendControl_LC75808();
 sendControl_LC75878();
 delay(2000);
 
 allOFF_LC75808(); // All off
 allOFF_LC75878(); // All off
 sendControl_LC75808();
 sendControl_LC75878();
 
for (int i=0; i<8 ; i++){  // This cycle is to do the animation of left & right blocks as a sample
LC75878_drawLeft(i); sendControl_LC75878();
LC75808_drawRight(i); sendControl_LC75808();
delay(200);
}
// I'm not do a table of chars, sent byte by byte to allow see and modify the bit of char.
// Of course is more easy do a array of char and send it to the specific position.
// This code is without dependency of external library and can be optimized because
// it is only a base to start a control of LC75808 and LC75878.
LC75878_00_msg1(); sendControl_LC75878();
LC75878_10_msg1(); sendControl_LC75878();
LC75878_01_msg1(); sendControl_LC75878();
LC75878_11_msg1(); sendControl_LC75878();
LC75878_001_msg1(); sendControl_LC75878();

LC75808_00_msg1(); sendControl_LC75808();
LC75808_10_msg1(); sendControl_LC75808();
LC75808_01_msg1(); sendControl_LC75808();
LC75808_11_msg1(); sendControl_LC75808();
delay(1000);

LC75878_00_msg2(); sendControl_LC75878();
LC75878_10_msg2(); sendControl_LC75878();
LC75878_01_msg2(); sendControl_LC75878();
LC75878_11_msg2(); sendControl_LC75878();
LC75878_001_msg2(); sendControl_LC75878();

LC75808_00_msg2(); sendControl_LC75808();
LC75808_10_msg2(); sendControl_LC75808();
LC75808_01_msg2(); sendControl_LC75808();
LC75808_11_msg2(); sendControl_LC75808();
delay(2000);
}
